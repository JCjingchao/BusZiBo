package com.szxb.buspay.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.buspay.entity.CardPayEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD_PAY_ENTITY".
*/
public class CardPayEntityDao extends AbstractDao<CardPayEntity, Long> {

    public static final String TABLENAME = "CARD_PAY_ENTITY";

    /**
     * Properties of entity CardPayEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Card_id = new Property(1, String.class, "card_id", false, "CARD_ID");
        public final static Property Order_time = new Property(2, Long.class, "order_time", false, "ORDER_TIME");
        public final static Property Balance = new Property(3, float.class, "balance", false, "BALANCE");
        public final static Property Amount = new Property(4, float.class, "amount", false, "AMOUNT");
        public final static Property Discount = new Property(5, float.class, "discount", false, "DISCOUNT");
        public final static Property Mch_trx_id = new Property(6, String.class, "mch_trx_id", false, "MCH_TRX_ID");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
    }


    public CardPayEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CardPayEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD_PAY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CARD_ID\" TEXT," + // 1: card_id
                "\"ORDER_TIME\" INTEGER," + // 2: order_time
                "\"BALANCE\" REAL NOT NULL ," + // 3: balance
                "\"AMOUNT\" REAL NOT NULL ," + // 4: amount
                "\"DISCOUNT\" REAL NOT NULL ," + // 5: discount
                "\"MCH_TRX_ID\" TEXT," + // 6: mch_trx_id
                "\"TIME\" TEXT);"); // 7: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD_PAY_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CardPayEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String card_id = entity.getCard_id();
        if (card_id != null) {
            stmt.bindString(2, card_id);
        }
 
        Long order_time = entity.getOrder_time();
        if (order_time != null) {
            stmt.bindLong(3, order_time);
        }
        stmt.bindDouble(4, entity.getBalance());
        stmt.bindDouble(5, entity.getAmount());
        stmt.bindDouble(6, entity.getDiscount());
 
        String mch_trx_id = entity.getMch_trx_id();
        if (mch_trx_id != null) {
            stmt.bindString(7, mch_trx_id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CardPayEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String card_id = entity.getCard_id();
        if (card_id != null) {
            stmt.bindString(2, card_id);
        }
 
        Long order_time = entity.getOrder_time();
        if (order_time != null) {
            stmt.bindLong(3, order_time);
        }
        stmt.bindDouble(4, entity.getBalance());
        stmt.bindDouble(5, entity.getAmount());
        stmt.bindDouble(6, entity.getDiscount());
 
        String mch_trx_id = entity.getMch_trx_id();
        if (mch_trx_id != null) {
            stmt.bindString(7, mch_trx_id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CardPayEntity readEntity(Cursor cursor, int offset) {
        CardPayEntity entity = new CardPayEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // card_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // order_time
            cursor.getFloat(offset + 3), // balance
            cursor.getFloat(offset + 4), // amount
            cursor.getFloat(offset + 5), // discount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mch_trx_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CardPayEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCard_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrder_time(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setBalance(cursor.getFloat(offset + 3));
        entity.setAmount(cursor.getFloat(offset + 4));
        entity.setDiscount(cursor.getFloat(offset + 5));
        entity.setMch_trx_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CardPayEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CardPayEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CardPayEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
